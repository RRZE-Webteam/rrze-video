{"version":3,"file":"974.js","mappings":"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","sources":["webpack://rrze-video/./node_modules/vidstack/prod/chunks/vidstack-IHrfMzpQ.js","webpack://rrze-video/./node_modules/vidstack/prod/chunks/vidstack-i7wGoJ9l.js"],"sourcesContent":["import { listenEvent } from './vidstack-CRlI3Mh7.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  return defaultMessage;\n}\nfunction listenCastContextEvent(type, handler) {\n  return listenEvent(getCastContext(), type, handler);\n}\n\nexport { getCastContext, getCastErrorMessage, getCastFrameworkURL, getCastSession, getCastSessionMedia, getDefaultCastOptions, hasActiveCastSession, hasLoadedCastFramework, isCastAvailable, isCastConnected, listenCastContextEvent };\n","import { IS_CHROME, IS_IOS, canGoogleCastSrc } from './vidstack-C1T0MO0v.js';\nimport { loadScript } from './vidstack-CSpLxgg_.js';\nimport { getCastContext, getCastSession, isCastConnected, hasLoadedCastFramework, getCastFrameworkURL, isCastAvailable, getCastErrorMessage, getDefaultCastOptions } from './vidstack-IHrfMzpQ.js';\nimport { peek } from './vidstack-CRlI3Mh7.js';\n\nclass GoogleCastLoader {\n  name = \"google-cast\";\n  target;\n  #player;\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let loadEvent, openEvent, errorEvent;\n    try {\n      loadEvent = await this.#loadCastFramework(ctx);\n      if (!this.#player) {\n        this.#player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this.#player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this.#notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this.#showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected()) this.#notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (code) {\n      const error = code instanceof Error ? code : this.#createError(\n        (code + \"\").toUpperCase(),\n        \"Prompt failed.\"\n      );\n      errorEvent = ctx.player.createEvent(\"google-cast-prompt-error\", {\n        detail: error,\n        trigger: openEvent ?? loadEvent,\n        cancelable: true\n      });\n      ctx.player.dispatch(errorEvent);\n      this.#notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        errorEvent\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: errorEvent ?? openEvent ?? loadEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this.#player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this.#player, ctx);\n  }\n  async #loadCastFramework(ctx) {\n    if (hasLoadedCastFramework()) return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw this.#createError(\"CAST_NOT_AVAILABLE\", \"Google Cast not available on this platform.\");\n    }\n    return loadedEvent;\n  }\n  async #showPrompt(options) {\n    this.#setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode) {\n      throw this.#createError(\n        errorCode.toUpperCase(),\n        getCastErrorMessage(errorCode)\n      );\n    }\n  }\n  #setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  #notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.notify(\"remote-playback-change\", detail, trigger);\n  }\n  #createError(code, message) {\n    const error = Error(message);\n    error.code = code;\n    return error;\n  }\n}\n\nexport { GoogleCastLoader };\n"],"names":["getCastFrameworkURL","hasLoadedCastFramework","window","cast","framework","isCastAvailable","chrome","isAvailable","isCastConnected","getCastContext","getCastState","CastState","CONNECTED","CastContext","getInstance","getCastSession","getCurrentSession","getCastSessionMedia","getSessionObj","media","hasActiveCastSession","src","contentId","getDefaultCastOptions","language","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","resumeSavedSession","androidReceiverCompatible","getCastErrorMessage","code","listenCastContextEvent","type","handler","GoogleCastLoader","name","target","mediaType","canPlay","prompt","ctx","loadEvent","openEvent","errorEvent","this","RemotePlayer","RemotePlayerController","player","createEvent","trigger","dispatchEvent","$props","googleCast","$state","remotePlaybackInfo","set","deviceName","getCastDevice","friendlyName","error","Error","toUpperCase","detail","cancelable","dispatch","load","GoogleCastProvider","loadStartEvent","customElements","whenDefined","loadedEvent","options","errorCode","requestSession","setOptions","state","notify","message"],"sourceRoot":""}