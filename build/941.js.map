{"version":3,"file":"941.js","mappings":"mKAAA,MAAMA,EAAY,kHACZC,EAA8B,IAAIC,IAClCC,EAA+B,IAAID,IACzC,SAASE,EAAsBC,GAC7B,OAAOA,EAAIC,MAAMN,KAAa,EAChC,CACAO,eAAeC,EAAkBC,EAASC,GACxC,GAAIT,EAAYU,IAAIF,GAAU,OAAOR,EAAYW,IAAIH,GACrD,GAAIN,EAAaQ,IAAIF,GAAU,OAAON,EAAaS,IAAIH,GACvD,MAAMI,EAAU,IAAIC,SAAQP,MAAOQ,IACjC,MAAMC,EAAQ,CAAC,gBAAiB,YAAa,aAC7C,IAAK,MAAMC,KAAQD,EACjB,IAAK,MAAME,IAAQ,EAAC,GAAM,GAAQ,CAChC,MAAMC,EAAMC,EAAwBX,EAASQ,EAAMC,GAInD,UAJ2EG,MAAMF,EAAK,CACpFG,KAAM,UACNC,OAAQb,EAAMa,UAEHC,OAAS,IAGpB,OAFAvB,EAAYwB,IAAIhB,EAASU,QACzBJ,EAAQI,EAGZ,CACF,IACCO,OAAM,IAAM,KAAIC,SAAQ,IAAMxB,EAAayB,OAAOnB,KAErD,OADAN,EAAasB,IAAIhB,EAASI,GACnBA,CACT,CACA,SAASO,EAAwBX,EAASQ,EAAMC,GAE9C,MAAO,uBAAuBA,EAAO,UAAY,QAAQT,KAAWQ,KADvDC,EAAO,OAAS,OAE/B,C","sources":["webpack://rrze-video/./node_modules/vidstack/prod/chunks/vidstack-Zc3I7oOd.js"],"sourcesContent":["const videoIdRE = /(?:youtu\\.be|youtube|youtube\\.com|youtube-nocookie\\.com)\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|)((?:\\w|-){11})/;\nconst posterCache = /* @__PURE__ */ new Map();\nconst pendingFetch = /* @__PURE__ */ new Map();\nfunction resolveYouTubeVideoId(src) {\n  return src.match(videoIdRE)?.[1];\n}\nasync function findYouTubePoster(videoId, abort) {\n  if (posterCache.has(videoId)) return posterCache.get(videoId);\n  if (pendingFetch.has(videoId)) return pendingFetch.get(videoId);\n  const pending = new Promise(async (resolve) => {\n    const sizes = [\"maxresdefault\", \"sddefault\", \"hqdefault\"];\n    for (const size of sizes) {\n      for (const webp of [true, false]) {\n        const url = resolveYouTubePosterURL(videoId, size, webp), response = await fetch(url, {\n          mode: \"no-cors\",\n          signal: abort.signal\n        });\n        if (response.status < 400) {\n          posterCache.set(videoId, url);\n          resolve(url);\n          return;\n        }\n      }\n    }\n  }).catch(() => \"\").finally(() => pendingFetch.delete(videoId));\n  pendingFetch.set(videoId, pending);\n  return pending;\n}\nfunction resolveYouTubePosterURL(videoId, size, webp) {\n  const type = webp ? \"webp\" : \"jpg\";\n  return `https://i.ytimg.com/${webp ? \"vi_webp\" : \"vi\"}/${videoId}/${size}.${type}`;\n}\n\nexport { findYouTubePoster, resolveYouTubeVideoId };\n"],"names":["videoIdRE","posterCache","Map","pendingFetch","resolveYouTubeVideoId","src","match","async","findYouTubePoster","videoId","abort","has","get","pending","Promise","resolve","sizes","size","webp","url","resolveYouTubePosterURL","fetch","mode","signal","status","set","catch","finally","delete"],"sourceRoot":""}